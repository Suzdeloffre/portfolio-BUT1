const { createApp } = Vue;

createApp({
	data() {
		return {
		"name": "Suzanne Deloffre",
		"navItems": [
			{ "label": "A propos", "link": "#about" },
			{ "label": "Comp√©tences", "link": "#skills" },
			{ "label": "Projets", "link": "#projects" }
		],
		"welcomeTitle": "Bienvenue sur mon portfolio, ",
		"welcomeText": "l'univers num√©rique d'une √©tudiante en premi√®re ann√©e de BUT informatique",
		"aboutText": "Dans ce monde num√©rique en constante √©volution, je trouve ma voie entre cr√©ativit√© et logique.\n\nChaque ligne de code est une incantation, chaque projet une qu√™te √† accomplir.",
		"softSkills": "‚ú® Travail d'√©quipe ‚Ä¢ Cr√©ativit√© ‚Ä¢ Adaptabilit√© ‚Ä¢ Curiosit√© ‚ú®",
		"skills": [
			{
				"title": "üåê D√©veloppement",
				"items": ["Java","HTML", "CSS", "JavaScript", "Python", "C"]
			},
			{
				"title": "‚ö° Frameworks",
				"items": ["Flask", "Vue.js", "Bootstrap", "Tailwind CSS"]
			},
			{
				"title": "üõ†Ô∏è Outils",
				"items": ["GitLab & GitHub", "VS Code", "Figma", "JetBrains"]
			}
		],
		"projects": [
			{
				"title": "Site de pr√©sentation d'Alten",
				"date": "septembre √† fin octobre 2024",
				"description": "Ce site internet simple pr√©sente la situation de l'entreprise Alten",
				"technologies": ["HTML", "CSS", "GitHub"],
				"competence": ["S1.06 - d√©couverte de l'environnement √©conomique et √©cologique", "S1.05 - recueil de besoin"],
				"longDescription": "Le site de pr√©sentation d'Alten a √©t√© notre tout premier projet en d√©but d'ann√©e. Il s'agissait de cr√©er un site web simple, en utilisant HTML et CSS. Ce site devait √™tre responsive, c'est-√†-dire capable de s'adapter automatiquement √† diff√©rents √©crans, comme ceux d'un t√©l√©phone, d'une tablette ou d'un ordinateur.\n\nL'objectif n'√©tait pas seulement technique. Ce projet m√™lait aussi des notions d'√©conomie, pour nous aider √† mieux comprendre le fonctionnement r√©el d'une entreprise. Nous avons donc √©tudi√© Alten sous plusieurs angles : son histoire, son activit√©, sa place sur le march√©. En plus du site, nous devions r√©diger un rapport √©conomique et concevoir des questionnaires pour imaginer les besoins d'un client fictif, comme on le ferait dans un vrai projet professionnel.\n\nCe projet nous a permis de d√©couvrir les bases de la gestion de projet : comment r√©partir les t√¢ches dans un groupe, s'organiser efficacement, et respecter des d√©lais. Nous avons aussi appris √† utiliser Git, un outil de travail collaboratif tr√®s utilis√© pour garder une trace des modifications dans un projet. Comme c'√©tait notre premi√®re fois avec cet outil, cela a √©t√© un vrai d√©fi, mais aussi une √©tape importante dans notre apprentissage.",
				"url": "https://pchassig.github.io/Presentation-Alten/index.html"
			},
			{
				"title": "Chausson Della Famiglia",
				"date": "octobre 2024",
				"description": "Site d'e-commerce de chaussons non-fonctionnel dans le but de montrer nos comp√©tences en CSS",
				"technologies": ["HTML", "CSS"],
				"competence": ["D√©veloppement web", "CSS avanc√©"],
				"longDescription": "Dans le cadre d'un cours, il nous a √©t√© demand√©, en groupe, de r√©aliser un site e-commerce non fonctionnel sur le th√®me de notre choix, dans le but de d√©montrer nos comp√©tences en CSS et donc en esth√©tique. J'ai r√©alis√© la page ¬´ √Ä propos ¬ª. Ce projet m'a permis d'approfondir mes connaissances en mise en page et en design responsive.",
				"url": "https://ethanchevrand.github.io/ecommerce_chaussons/pages/apropos.html"
			},
			{
				"title": "Maintenance Trida",
				"date": "octobre √† d√©but d√©cembre 2024",
				"description": "Application web pour une entreprise fictive de transport de d√©chets, en Flask python afin de manipuler une base de donn√©e",
				"technologies": ["HTML", "CSS", "Flask", "MySQL", "Bootstrap"],
				"competence": ["S1.04 - G√©rer les donn√©es de l'information"],
				"longDescription": "Nous avons r√©alis√© une application web pour g√©rer des donn√©es, en utilisant diff√©rents outils : Flask, un outil en Python qui permet de cr√©er des sites web interactifs ; HTML et CSS, qui servent √† cr√©er l'apparence du site ; et MySQL, un syst√®me pour stocker et organiser les informations.\n\nLe projet partait d'une situation fictive qui nous a √©t√© pr√©sent√©e √† l'oral : l'entreprise Trida, une soci√©t√© imaginaire qui transporte des d√©chets sp√©cifiques dans des bennes vers des usines de tri. Cette entreprise utilise plusieurs v√©hicules, qui font des tourn√©es chaque jour. Ces tourn√©es suivent un ordre pr√©cis : les camions passent dans diff√©rents centres de tri pour r√©cup√©rer des produits/d√©chets, puis vont les d√©poser dans une usine de recyclage.\n\nNotre objectif √©tait de concevoir une base de donn√©es, c'est-√†-dire un syst√®me bien organis√© pour stocker toutes ces informations, puis de cr√©er une petite interface web permettant de g√©rer cette base. Gr√¢ce √† notre application, on peut par exemple ajouter un v√©hicule, modifier un produit ou supprimer une tourn√©e, tout en respectant les liens logiques entre les donn√©es.\n\nUn des points importants de ce projet a √©t√© la communication dans le groupe. Au d√©but, nous avions chacun une compr√©hension un peu diff√©rente de la situation de l'entreprise. Il a donc fallu bien s'expliquer pour tomber d'accord sur la mani√®re de repr√©senter les donn√©es, ce qu'on appelle le mod√®le conceptuel (une sorte de sch√©ma de l'organisation des informations). Un autre d√©fi a √©t√© la prise en main de Flask, qui peut √™tre assez technique au d√©but. Certaines fonctionnalit√©s ou d√©tails de fonctionnement nous ont demand√© du temps et de la pers√©v√©rance pour bien les comprendre et les faire fonctionner.",
				"images": [
					{
						"src": "./assets/images/MCD_trida.jpg",
						"alt": "Figure 1 : Mod√®le Conceptuel de Donn√©es (MCD) du projet Trida",
						"caption": "Figure 1 : Mod√®le Conceptuel de Donn√©es (MCD) du projet Trida.",
						"description": "Cette figure (1) repr√©sente la situation initiale du projet, traduite sous forme graphique √† travers un Mod√®le Conceptuel de Donn√©es (MCD). Ce type de sch√©ma permet de structurer les informations essentielles d‚Äôun syst√®me de mani√®re claire, en identifiant les √©l√©ments principaux et leurs relations.\n\nDans ce MCD, nous avons distingu√© cinq objets fondamentaux appel√©s entit√©s, comme par exemple le CENTRE ou le V√âHICULE. Une entit√© repr√©sente un \"type de chose\" manipul√©e par le syst√®me d'information.\n\nCes entit√©s sont reli√©es entre elles par trois associations, qui illustrent les liens logiques entre les objets du syst√®me. Par exemple, un centre peut accueillir plusieurs v√©hicules, et un v√©hicule peut effectuer plusieurs tourn√©es.\n\nSur chaque lien (ou association), on retrouve des cardinalit√©s, qui indiquent combien d‚Äôexemplaires d‚Äôun objet peuvent √™tre reli√©s √† un autre. Par exemple, une cardinalit√© (0,n) signifie \"z√©ro ou plusieurs\", tandis que (1,n) signifie \"au moins un\". Ces notations permettent de repr√©senter pr√©cis√©ment les r√®gles du m√©tier telles qu‚Äôelles s‚Äôappliquent √† la gestion r√©elle (ex : un centre de tri contient au moins un produit).\n\nTout d‚Äôabord, nous avons utilis√© des comp√©tences en analyse fonctionnelle. √Ä partir d‚Äôune situation concr√®te (la gestion des d√©chets industriels), nous avons identifi√© les √©l√©ments importants du syst√®me : les centres, les v√©hicules, les produits et les usines. Nous avons compris les besoins exprim√©s et les avons traduits en un sch√©ma clair et structur√©.Passer d‚Äôune situation concr√®te √† un Mod√®le Conceptuel de Donn√©es (MCD) permet de structurer la base de donn√©es de fa√ßon coh√©rente d√®s le d√©part. Cela √©vite des erreurs lors de l‚Äôutilisation pratique de l‚Äôapplication, comme des incoh√©rences ou des doublons. Cette √©tape facilite aussi la manipulation de la base : il devient plus simple d‚Äôajouter, de modifier ou de supprimer des donn√©es tout en gardant une organisation claire et logique.\n\nEnsuite, nous avons appliqu√© nos connaissances en mod√©lisation de donn√©es. Nous avons con√ßu un Mod√®le Conceptuel de Donn√©es (MCD) en respectant les r√®gles apprises, comme la normalisation et l‚Äôidentification des cl√©s primaires. Par exemple, chaque v√©hicule est identifi√© par un num√©ro unique. Nous avons √©galement utilis√© une convention d‚Äô√©criture (en snake_case) pour garder une coh√©rence dans le nom des attributs.\n\nEnfin, nous avons mobilis√© des savoir-faire li√©s √† la compr√©hension du m√©tier. Il a fallu r√©fl√©chir √† la mani√®re dont les objets du syst√®me interagissent entre eux. Une question importante du projet √©tait de savoir si un v√©hicule pouvait transporter plusieurs produits vers diff√©rentes d√©charges dans une m√™me tourn√©e. Cela nous a amen√©s √† faire des recherches sur les pratiques existantes, et √† repr√©senter cette situation avec une association ternaire entre v√©hicule, produit et d√©charge.\n\nCertes, ce projet √©tant le premier de l‚Äôann√©e dans son genre, le MCD est tout de m√™me simple par sa complexit√© et son nombre d‚Äôentit√© et d‚Äôassociation."
					},
					{
						"src": "./assets/images/code_trida_delete_vehicule.jpg",
						"alt": "Figure 2 : Code de suppression d'un v√©hicule - partie 1",
						"caption": "Figure 2 : Code de suppression d'un v√©hicule - partie 1",
						"description": "Ces deux figures (2 et 3) montrent l‚Äôimpl√©mentation de la suppression compl√®te d‚Äôun v√©hicule dans notre application. Supprimer un v√©hicule n‚Äôest pas une action isol√©e : cela a des cons√©quences sur d‚Äôautres parties de la base de donn√©es, notamment sur les tourn√©es qu‚Äôil a effectu√©es et sur les d√©charges qu‚Äôil a faites dans les centres de tri.\n\nPour g√©rer cette op√©ration, nous avons utilis√© le framework Flask, un outil en Python qui permet de cr√©er des sites web interactifs, afin de g√©rer des routes et de connecter la logique Python avec l‚Äôinterface HTML. Le c≈ìur du fonctionnement repose sur des routes, c‚Äôest-√†-dire des liens entre une adresse web (URL) et une fonction Python. Par exemple, lorsqu‚Äôon clique sur ¬´ Supprimer ¬ª dans la page HTML, Flask appelle automatiquement la bonne fonction Python gr√¢ce √† la route d√©finie avec @app.route.\n\nLes diff√©rentes fonctions suivent un principe de programmation modulaire, en cr√©ant une fonction sp√©cifique pour g√©rer la suppression de v√©hicule, dans une logique CRUD (Create, Read, Update, Delete).\n\n√Ä l‚Äôint√©rieur de cette fonction, nous √©crivons des requ√™tes SQL (un langage sp√©cialis√© pour interagir avec des bases de donn√©es). Nous avons utilis√© des jointures (INNER JOIN) pour interroger plusieurs tables √† la fois, et ainsi r√©cup√©rer toutes les donn√©es associ√©es √† un v√©hicule (comme ses tourn√©es ou ses d√©charges). Cela permet de v√©rifier si ce v√©hicule est encore utilis√© ailleurs dans la base."
					},
					{
						"src": "./assets/images/code_trida_delete_dependance.jpg",
						"alt": "Figure 3 : Code de suppression des d√©pendances - partie 2",
						"caption": "Figure 3 : Code de suppression des d√©pendances - partie 2",
						"description": "Avant de supprimer quoi que ce soit, nous faisons ces v√©rifications pour pr√©server l‚Äôint√©grit√© r√©f√©rentielle des donn√©es, c‚Äôest-√†-dire pour √©viter de laisser des morceaux de donn√©es orphelins ou incoh√©rents. Par exemple, si un v√©hicule est encore r√©f√©renc√© dans une tourn√©e, il faut d‚Äôabord supprimer cette tourn√©e avant de pouvoir supprimer le v√©hicule lui-m√™me. C‚Äôest ce que l‚Äôon voit avec les deux premi√®res requ√™tes SQL qui enregistrent dans une variable les passages et les d√©charges. Gr√¢ce √† la condition suivante, on ne supprimera que les v√©hicules pour lesquels ces deux variables sont vides. Sinon, une page s‚Äôaffichera pour nous permettre de supprimer les passages et d√©charges avant.\n\nN√©anmoins, ces v√©rifications restent simples, et les erreurs pourraient √™tre plus fr√©quentes sur une base de donn√©es plus complexe. Ainsi, on pourrait am√©liorer ce code en ajoutant des exceptions SQL qui renverraient des messages d‚Äôerreur. De plus, la r√©p√©tition des fonctions et des routes pourrait √™tre √©vit√©e en les factorisant, comme c‚Äôest le cas pour les deux requ√™tes qui permettent de d√©terminer si un v√©hicule a un passage ou une d√©charge. Cela am√©liorerait la performance de l‚Äôapplication."}
				],
				"url": "https://github.com/Suzdeloffre/SAE3.4-Groupe7/tree/main"
			},
			{
				"title": "Pauvocoder",
				"date": "d√©cembre √† d√©but janvier 2025",
				"description": "Application permettant de modifier la hauteur de la voix sans modifier la vitesse.",
				"technologies": ["Java"],
				"competence": ["S1.01 ‚Äì Impl√©mentation d'un besoin client", "S1.02 ‚Äì Comparaison d'approches algorithmique"],
				"longDescription": "Le Pauvocoder est une application que nous avons d√©velopp√©e en Java, sans interface graphique, c'est-√†-dire qu'elle fonctionne uniquement en ligne de commande. Son but est de modifier la hauteur de la voix (rendre un son plus aigu ou plus grave) sans changer la vitesse de lecture de l'audio. En plus, gr√¢ce √† un outil appel√© StdDraw, nous avons ajout√© une visualisation en temps r√©el des ondes sonores, pour voir √† l'√©cran la forme du son pendant qu'on l'√©coute.\n\nDans ce projet, il nous a aussi √©t√© demand√© de proposer deux fa√ßons diff√©rentes de coder une m√™me fonction, puis de comparer leurs performances (vitesse, efficacit√©) pour choisir la meilleure solution. Cela nous a appris √† r√©fl√©chir en termes d'optimisation.\n\nCe qui a √©t√© le plus difficile, ce n'√©tait pas la gestion des donn√©es elles-m√™mes (comme les tableaux), mais plut√¥t de comprendre le fonctionnement du son, et de savoir quelles transformations math√©matiques pouvaient √™tre appliqu√©es sans d√©former le r√©sultat audio. Cela nous a pouss√©s √† faire des recherches et √† bien observer les effets concrets de chaque modification.",
				"images": [
					{
						"src": "./assets/images/graphic_result_profiler_pauvocoder.jpg",
						"alt": "Figure 4 : Graphique de comparaison des performances des deux impl√©mentations de CrossCorrelatiion",
						"caption": "Figure 4 : Graphique de comparaison des performances des deux impl√©mentations de CrossCorrelatiion",
						"description": "La figure 4 est un graphique en barres qui illustre les temps d‚Äôex√©cution de deux versions diff√©rentes d‚Äôune m√™me m√©thode. Sur l‚Äôaxe horizontal (l‚Äôaxe des abscisses), on retrouve le temps en millisecondes, et sur l‚Äôaxe vertical (l‚Äôaxe des ordonn√©es), le nombre d‚Äôessais effectu√©s par le programme, allant de 100 000 √† 10 millions. L‚Äôobjectif est de comparer la rapidit√© des deux m√©thodes, c‚Äôest-√†-dire de voir laquelle s‚Äôex√©cute le plus vite selon la taille des donn√©es trait√©es.\n\nLa m√©thode compar√©e sert √† mesurer la similarit√© entre deux sons, en calculant ce qu‚Äôon appelle une corr√©lation crois√©e. Concr√®tement, cela revient √† comparer deux morceaux de sons pour voir √† quel point ils se ressemblent √† diff√©rents d√©calages. Cette op√©ration est utilis√©e dans notre application Pauvocoder pour recoller proprement les morceaux d‚Äôun son d√©coup√©, en √©vitant les bruits d√©sagr√©ables comme des \"bips\" ou des coupures brusques.\n\nLa premi√®re version du code utilise un tableau temporaire pour effectuer les calculs. Cela signifie qu‚Äôelle cr√©e un espace en m√©moire pour stocker des donn√©es interm√©diaires avant de donner un r√©sultat. La deuxi√®me version, quant √† elle, √©vite de cr√©er un tableau suppl√©mentaire : elle fait les calculs directement en d√©calant les indices dans les tableaux, ce qui permet d‚Äô√©conomiser de la m√©moire.\n\nPour comparer les performances des deux m√©thodes, nous avons mis en place une s√©rie de tests, ce qu‚Äôon appelle du profiling ou du benchmarking. Ces tests ont √©t√© r√©p√©t√©s avec plusieurs tailles de donn√©es (10 000, 1 million, et 10 millions de r√©p√©titions) pour obtenir des r√©sultats fiables. On observe que, pour les petits tableaux (par exemple, 100 valeurs), la seconde version appel√©e crossCorrelation2 est en moyenne 4,6 fois plus rapide, et peut permettre de r√©duire jusqu‚Äô√† 10 % le temps d‚Äôex√©cution global. Sur des tests plus longs, elle reste l√©g√®rement meilleure, avec 5,67 % de gain en efficacit√©.\n\nCependant, lorsque les tableaux deviennent plus grands (1000 valeurs), la diff√©rence de performance devient tr√®s faible. Aucune des deux m√©thodes ne prend clairement l‚Äôavantage, ce qui signifie que l‚Äôoptimisation a ses limites lorsque la complexit√© des donn√©es augmente.\n\nEn analysant plus en d√©tail, on comprend pourquoi la seconde version est plus rapide : elle √©vite des op√©rations inutiles, comme allouer de la m√©moire pour un nouveau tableau, et r√©p√©ter des calculs redondants. Ce type d‚Äôoptimisation est appel√© optimisation spatiale, car il cherche √† √©conomiser de l‚Äôespace m√©moire. Cela repose sur une bonne compr√©hension des co√ªts li√©s aux op√©rations m√©moire, souvent sous-estim√©s en d√©but de formation.\n\nSur le plan du traitement du signal (la discipline qui √©tudie les sons, images ou autres donn√©es analogues), ce travail nous a permis de mettre en ≈ìuvre concr√®tement une op√©ration cl√©, la corr√©lation crois√©e, et de l‚Äôadapter √† notre cas d‚Äôusage : am√©liorer la qualit√© sonore d‚Äôun audio transform√© par notre programme.\n\nMalgr√© tous ces efforts, le gain r√©el de performance reste modeste, car la m√©thode elle-m√™me est relativement simple. Et notre test ne s‚Äôappuie que sur un seul crit√®re : le temps d‚Äôex√©cution. D‚Äôautres aspects comme la lisibilit√©, la stabilit√© ou la flexibilit√© du code n‚Äôont pas √©t√© pris en compte.\n\nEnfin, il faut aussi reconna√Ætre que notre graphique manque un peu de rigueur. Hors contexte, comme ici, il devient difficile √† interpr√©ter : les axes ne sont pas bien l√©gend√©s, certaines variables sont peu lisibles, et la l√©gende des couleurs est en fran√ßais alors que le reste du graphique est en anglais. Ce sont des d√©tails importants √† corriger dans un rapport professionnel ou scientifique, car ils influencent directement la compr√©hension des r√©sultats par un lecteur ext√©rieur."
					}
				],
				"url": "https://github.com/Alexis-Colas/VoCoder"
			},
			{
				"title": "Site E-commerce",
				"date": "f√©vrier √† d√©but avril 2025",
				"description": "Boutique de vente de casque en ligne pour une entreprise fictive. Le back-end est s√©par√© en deux parties : client et administrateur. Avec la gestion des stock, des commandes, des adresses, des commandaires.",
				"technologies": ["HTML", "CSS", "Flask", "MySQL", "Bootstrap"],
				"competence": ["S2.04 - Exploitation d'une base de donn√©es", "S2.05 ‚Äì Gestions d'un projet"],
				"longDescription": "Dans ce projet, nous avons travaill√© sur le site web d'une entreprise fictive nomm√©e \"T√™te prot√©g√©e\", sp√©cialis√©e dans la vente de casques (VTT, ski, motocross, etc.). Le but √©tait de reprendre un site d√©j√† existant, cod√© en Python avec le framework Flask, et de le modifier et am√©liorer pour qu'il soit pleinement fonctionnel. Ce site utilise √©galement HTML et CSS pour l'affichage, Bootstrap pour la mise en page, et MySQL pour la base de donn√©es.\n\nNous avons d√ª ajouter plusieurs fonctionnalit√©s et corriger certains √©l√©ments, en prenant en compte la structure du code existant, ce qui nous a demand√© un temps d'analyse pour bien comprendre comment il fonctionnait avant de le modifier. Il fallait aussi faire attention √† certaines r√®gles importantes sur les bases de donn√©es, par exemple pour √©viter des erreurs dans la gestion du stock.\n\nLe site est divis√© en deux grandes parties. La premi√®re est le C√¥t√© administrateur qui permet de g√©rer le stock de casques, suivre et modifier les commandes, lire et r√©pondre aux commentaires, ainsi que consulter les adresses de livraison. Le second est celui client qui permet de naviguer dans le catalogue, de mettre des casques dans un panier, de passer commande, de g√©rer ses adresses, et de laisser des commentaires et notes sur les produits achet√©s.\n\nEnfin, nous avons int√©gr√© une partie repr√©sentation graphique des donn√©es avec l'outil DataViz, pour permettre √† l'administrateur de voir rapidement les statistiques des ventes selon les types de casques.\n\nDans un second temps, nous avons prolong√© le projet en abordant la gestion de projet. L'objectif √©tait de simuler une d√©marche professionnelle autour du site e-commerce. Nous avons donc r√©dig√© un cahier des charges, qui d√©crit les objectifs, les besoins et les contraintes du projet. Puis nous avons pr√©par√© un plan qualit√© projet, pour d√©finir comment garantir un bon niveau de qualit√© dans les livrables. Il a √©t√© n√©cessaire de r√©aliser une √©tude de co√ªt (en anglais), pour estimer le budget n√©cessaire au projet. Et enfin, nous avons con√ßu un planning de Gantt, un outil visuel pour planifier les diff√©rentes √©tapes dans le temps. Tous ces documents permettent de garantir une bonne progression du projet dans le temps en respectant les d√©lais, les co√ªts (fictifs dans notre cas), et la qualit√©.",
				"url": "https://github.com/Suzdeloffre/SAE2-3.4.5"
			},
			{
				"title": "Portfolio",
				"date": "juin 2025",
				"description": "Portfolio interactif utilisant Three.js pour cr√©er des exp√©riences immersives.",
				"technologies": ["Vue.js", "HTML", "CSS","Tailwind CSS"],
				"competence": ["D√©veloppement web", "Mod√©lisation 3D", "Design interactif"],
				"longDescription": "Ce portfolio personnel repr√©sente mes comp√©tences acquises en premi√®re ann√©e de BUT informatique. Il utilise des technologies modernes comme Vue.js pour la r√©activit√© de l'interface, et Tailwind CSS pour un design moderne et responsive. Le projet met en avant mes projets acad√©miques √† travers une interface ludique avec des √©toiles flottantes. C'est un projet qui combine cr√©ativit√© et technique pour offrir une exp√©rience utilisateur unique.",
				"url": "https://github.com"
			},
			{
				"title": "Quixo",
				"date": "mai √† mi-juin 2025",
				"description": "Jeu de plateau d√©velopp√© en Java avec une interface graphique cr√©√©e par le framework Boardifier",
				"technologies": ["Java", "JavaFX"],
				"competence": ["S2.01 - D√©veloppement d'une application", "S2.02 - Exploration algorithmique d'un probl√®me", "S2.06 - Organisation d'un travail d'√©quipe"],
				"longDescription": "Le Quixo est un jeu de plateau que nous avons programm√© en Java, avec une interface graphique pr√©vue gr√¢ce √† JavaFX et un outil appel√© Boardifier. Ce jeu se joue sur un plateau de 5 cases sur 5, o√π sont plac√©s des d√©s un peu sp√©ciaux : chaque d√© a une face avec une croix, une face avec un rond, et les autres faces sont neutres. Le but du jeu est d'aligner une ligne, une colonne ou une diagonale uniquement avec son propre symbole (croix ou rond).\n\nQuand on lance l'application, on arrive sur un menu qui propose plusieurs options : jouer contre un autre joueur, jouer contre l'ordinateur (appel√© bot), ou laisser deux ordinateurs s'affronter. Pour cela, nous avons programm√© deux strat√©gies de jeu diff√©rentes des bots.\n\nCette application suit le mod√®le MVC (Mod√®le, Vue, Contr√¥leur). Celui-ci sert √† organiser le code d'une application en s√©parant clairement les donn√©es (Mod√®le), l'affichage (Vue) et la gestion des interactions utilisateur (Contr√¥leur). Cette s√©paration facilite la maintenance, la compr√©hension du code et permet de modifier une partie sans impacter les autres.\n\nLors de la cr√©ation de ce portfolio, ce projet n'√©tait pas encore compl√®tement termin√©, car seule la version en interface console (en ligne de texte) avait √©t√© termin√©e.",
				"images": [
					{
						"src": "./assets/images/quixo_test.jpg",
						"alt": "Figure 5 : Classe de test JUnit pour QuixoStageFactory",
						"caption": "Figure 5 : Classe de test JUnit pour QuixoStageFactory",
						"description": "Cette figure (5) montre une classe de test √©crite en Java. Elle a pour but de v√©rifier que la classe QuixoStageFactory fonctionne correctement. Cette classe QuixoStageFactory sert √† initialiser tous les √©l√©ments du jeu Quixo, comme le plateau de 5x5 cases et les d√©s √† symboles (croix, rond ou neutre). Elle h√©rite d'une classe fournie par le framework graphique Boardifier, c‚Äôest-√†-dire qu‚Äôelle reprend le comportement g√©n√©ral d‚Äôune classe existante mais y ajoute ou modifie certaines fonctions sp√©cifiques pour s‚Äôadapter au jeu Quixo. La classe de test utilise JUnit, un outil pour faire des tests automatis√©s. Ces tests permettent de v√©rifier automatiquement que le programme fonctionne comme pr√©vu. On y retrouve aussi Mockito, un outil qui sert √† cr√©er de faux objets (appel√©s mocks) pour simuler certaines parties du programme sans les ex√©cuter r√©ellement.\n\nLe programme repose sur une architecture orient√©e objet, avec un syst√®me d‚Äôh√©ritage de classes issu du framework Boardifier. Cela signifie que nos propres classes (notamment les contr√¥leurs) sont √©troitement li√©es √† des classes du framework, ce qui rend les tests classiques plus d√©licats √† r√©aliser. En effet, lorsqu‚Äôune classe d√©pend fortement d‚Äôautres classes, il devient difficile de la tester de mani√®re isol√©e sans que les comportements externes n‚Äôinfluencent les r√©sultats.\n\nPour r√©soudre ce probl√®me, nous avons utilis√© Mockito. Gr√¢ce √† ces objets factices, nous avons pu isoler la classe que nous voulions tester, ici QuixoStageFactory, en simulant les comportements des classes dont elle d√©pend, comme la classe StageModel.\n\nLa logique derri√®re nos tests √©tait centr√©e sur la v√©rification du comportement du programme, en d√©finissant √† l‚Äôavance ce que nous attendions comme r√©sultat. Par exemple, nous avons d√©cid√© que, lorsqu‚Äôon demande au StageModel quel est le joueur actuel, il doit renvoyer ¬´ joueur 1 ¬ª. Ce comportement a √©t√© simul√© √† l‚Äôaide de Mockito.\n\nEnsuite, nous avons test√© que la m√©thode setup de la classe QuixoStageFactory permettait bien d‚Äôinitialiser correctement les √©l√©ments du jeu, en particulier en v√©rifiant √† la fin du test que 25 d√©s (un pour chaque case du plateau) avaient bien √©t√© cr√©√©s.\n\nCependant, notre logique de test reposait principalement sur l‚Äôattente de r√©sultats pr√©d√©finis, sans forc√©ment aller jusqu‚Äô√† une analyse approfondie du code. En d‚Äôautres termes, nous avons surtout v√©rifi√© si le programme r√©agissait correctement dans des situations concr√®tes, mais sans couvrir de mani√®re syst√©matique toutes les possibilit√©s du code.\n\nPar cons√©quent, certaines classes manquent d‚Äôune v√©rification compl√®te de tous les cas d‚Äôex√©cution possibles. Nous avons plut√¥t adopt√© une approche empirique, en imaginant les diff√©rentes erreurs qu‚Äôun utilisateur pourrait faire, puis en testant si des messages d‚Äôerreur clairs √©taient bien renvoy√©s.\n\nPar exemple, nous avons v√©rifi√© le comportement du programme lorsqu‚Äôun joueur s√©lectionne une case en dehors de la grille, ou encore lorsqu‚Äôil essaie de jouer un d√© appartenant √† son adversaire. Ces tests sont utiles pour garantir une bonne exp√©rience utilisateur, mais ils ne remplacent pas une couverture de test compl√®te bas√©e sur la structure du code, puisque certains comportement et certaines m√©thodes n‚Äôont pas d‚Äôinfluence sur l‚Äôinterface visible. "
					}
				],
				"url": "https://github.com"
			}
		],
		"starPositions": [
			{ "left": 90, "top": 90 },
			{ "left": 270, "top": 200 },
			{ "left": 450, "top": 120 },
			{ "left": 670, "top": 90 },
			{ "left": 800, "top": 190 },
			{ "left": 150, "top": 300 },
			{ "left": 550, "top": 270 }
		],
		hoveredProject: null,
        tooltipX: 0,
        tooltipY: 0,
        selectedProject: null,
        showProjectModal: false
		}
		
	},

  methods: {
	openProjectModal(project) {
	  this.selectedProject = project;
	  this.showProjectModal = true;
	},

	closeProjectModal() {
	  this.showProjectModal = false;
	  this.selectedProject = null;
	},

	updateTooltipPosition(event) {
	  // Position de base du curseur
	  let baseX = event.clientX + 10;
	  let baseY = event.clientY - 10;
	  
	  // Dimensions de la fen√™tre
	  const windowWidth = window.innerWidth;
	  const windowHeight = window.innerHeight;
	  
	  // Dimensions infobulle
	  const tooltipWidth = 350; 
	  const tooltipHeight = 200;
	  
	  const margin = 20;
	  
	  // Ajustement horizontal
	  if (baseX + tooltipWidth + margin > windowWidth) {
		this.tooltipX = event.clientX - tooltipWidth - 10;
		if (this.tooltipX < margin) {
		  this.tooltipX = margin;
		}
	  } else {
		this.tooltipX = baseX;
	  }
	  
	  // Ajustement vertical
	  if (baseY + tooltipHeight + margin > windowHeight) {
		// Place l'infobulle au-dessus du curseur
		this.tooltipY = event.clientY - tooltipHeight - 10;
		
		// V√©rifie qu'elle ne sort pas en haut
		if (this.tooltipY < margin) {
		  this.tooltipY = margin;
		}
	  } else {
		this.tooltipY = baseY;
	  }
	  
	  // Cas extr√™me : si l'infobulle est plus large que la fen√™tre
	  if (tooltipWidth > windowWidth - (margin * 2)) {
		this.tooltipX = margin;
	  }
	}
  }
}).mount('#app');

